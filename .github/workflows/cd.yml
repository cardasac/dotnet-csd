name: webapp
env:
  PYTHON_VERSION: 3.11
  IMAGE_NAME: ${{ github.repository }}
  TF_CLOUD_ORGANIZATION: "alviralex"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: csd
  CONFIG_DIRECTORY: "./"
on:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  actions: write
  statuses: write
  pull-requests: write

jobs:
  ci:
    uses: ./.github/workflows/ci.yml
    secrets: inherit
    permissions:
      actions: write
      contents: read
      statuses: read
      security-events: write
      pull-requests: write
    with:
      python_version: 3.11
      CONFIG_DIRECTORY: "./"
      TF_WORKSPACE: csd


  terraform-apply:
    runs-on: ubuntu-latest
    needs: ci
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.1.1
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.1.1
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.1.1
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
  docker-publish:
    runs-on: ubuntu-latest
    needs: ci
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Docker Scout
        id: docker-scout
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          to-latest: true
          ignore-base: true
          ignore-unchanged: true
          only-fixed: true
          sarif-file: sarif.output.json
          summary: true
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload SARIF result
        id: upload-sarif
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: sarif.output.json
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Build version
        run: |
          pip install awsebcli
          eb init -p python-$PYTHON_VERSION --region eu-west-1 csd
          eb appversion -c -l $GITHUB_RUN_NUMBER
  deploy-staging:
    runs-on: ubuntu-latest
    concurrency:
      group: staging_environment
    environment:
      name: staging
      url: https://csd-staging.alviralex.com
    needs: [build, docker-publish, terraform-apply]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Deploy staging
        run: |
          pip install awsebcli
          eb init -p python-$PYTHON_VERSION --region eu-west-1 csd
          eb deploy --version $GITHUB_RUN_NUMBER staging
  deploy-production:
    runs-on: ubuntu-latest
    concurrency:
      group: production_environment
    environment:
      name: production
      url: https://csd-production.alviralex.com
    needs: [k6-load-test, zap-scan, cypress-run]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Deploy production
        run: |
          pip install awsebcli
          eb init -p python-$PYTHON_VERSION --region eu-west-1 csd
          eb deploy --version $GITHUB_RUN_NUMBER production
  zap-scan:
    runs-on: ubuntu-latest
    needs: deploy-staging
    permissions:
      contents: read
      security-events: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: ${{ secrets.APP_URL }}
          cmd_options: "-a"
  k6-load-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run k6 cloud test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: load_tests/main.js
          cloud: true
          token: ${{ secrets.K6_CLOUD_API_TOKEN }}
        env:
          APP_HOSTNAME: ${{ secrets.APP_HOSTNAME }}
  cypress-run:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cypress run
        uses: cypress-io/github-action@v6
        env: 
          CYPRESS_APP_URL: ${{ secrets.APP_URL }}
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore
      - uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: cypress/videos
          if-no-files-found: ignore