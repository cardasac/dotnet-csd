name: .NET
concurrency:
  group: ${{ github.workflow }}
env:
  AZURE_WEBAPP_NAME: alex-csd
  AZURE_WEBAPP_PACKAGE_PATH: "."
  DOTNET_VERSION: "7.0.x"
  IMAGE_NAME: ${{ github.repository }}
on:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"

  pull_request:
    branches: ["main"]
    paths-ignore:
      - "README.md"

  workflow_dispatch:

permissions:
  contents: read
  packages: write
  actions: write
  statuses: write
  pull-requests: read

jobs:
  analyze:
    name: analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["csharp", "javascript-typescript"]
        # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
        # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #     echo "Run, Build Application using script"
      #     ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
  semgrep:
    permissions:
      actions: read
      contents: read
      security-events: write
    # User definable name of this GitHub Actions job.
    name: semgrep/ci
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: returntocorp/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci --sarif --output=semgrep.sarif
        env:
          # Connect to Semgrep Cloud Platform through your SEMGREP_APP_TOKEN.
          # Generate a token from Semgrep Cloud Platform > Settings
          # and add it to your GitHub secrets.
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload SARIF file for GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
        if: always()
  docker-publish:
    runs-on: ubuntu-latest
    needs:
      [
        snyk-code,
        snyk-os,
        snyk-docker,
        hadolint,
        sonarcloud,
        trivy,
        qodana,
        analyze,
      ]
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: webapp
          platforms: linux/amd64
          push: true
          tags: |
            ${{env.IMAGE_NAME}}:latest
            ghcr.io/${{env.IMAGE_NAME}}:latest
          cache-from: type=registry,ref=${{env.IMAGE_NAME}}:latest
          cache-to: type=inline

      - name: Docker Scout
        id: docker-scout
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          to-latest: true
          ignore-base: true
          ignore-unchanged: true
          only-fixed: true
          sarif-file: sarif.output.json
          summary: true
      - name: Upload SARIF result
        id: upload-sarif
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: sarif.output.json
  qodana:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: "Qodana Scan"
        uses: JetBrains/qodana-action@v2023.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache-default-branch-only: true
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ runner.temp }}/qodana/results/qodana.sarif.json
  snyk-code:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
          command: code test

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
  snyk-os:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore dependencies
        run: dotnet restore
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --sarif-file-output=snyk.sarif
          command: test

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
  snyk-docker:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build a Docker image
        run: docker build -t webapp --file webapp/Dockerfile webapp
      - name: Run Snyk to check Docker image for vulnerabilities
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: webapp
          args: --file=webapp/Dockerfile
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
  trivy:
    name: trivy
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  hadolint:
    name: hadolint
    runs-on: ubuntu-latest
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./webapp/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint-results.sarif
          wait-for-processing: true
  build:
    runs-on: ubuntu-latest
    needs:
      [
        snyk-code,
        snyk-os,
        snyk-docker,
        hadolint,
        sonarcloud,
        trivy,
        qodana,
        analyze,
        semgrep
      ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Publish
        run: dotnet publish webapp/webapp.csproj -c Release -o website -r linux-x64 --self-contained true /p:UseAppHost=true
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: website
          path: website/**
          if-no-files-found: error
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      - name: Install SonarCloud scanners and build
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet build --no-incremental
      - name: Test
        run: dotnet test csd-tests --collect "XPlat Code Coverage;Format=opencover" --logger "trx"
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        run: |
          dotnet sonarscanner begin /k:"cardasac_dotnet-csd" /o:"cardasac" /d:sonar.token="$SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=csd-tests/TestResults/**/coverage.opencover.xml /d:sonar.cs.vstest.reportsPaths=csd-tests/TestResults/*.trx
          dotnet build
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    needs: [build, docker-publish]
    outputs:
      webapp-url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: website
          path: website
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: "Run Azure webapp deploy action using publish profile credentials"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: staging
          package: "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/website"
      - name: az cli logout
        run: az logout

  zap_scan:
    runs-on: ubuntu-latest
    needs: deploy-staging
    permissions:
      contents: read
      security-events: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: ${{ needs.deploy-staging.outputs.webapp-url }}
          cmd_options: "-a"
  k6_load_test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run k6 cloud test
        uses: grafana/k6-action@v0.3.0
        with:
          filename: load_tests/main.js
          cloud: true
          token: ${{ secrets.K6_CLOUD_API_TOKEN }}
  cypress-run:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cypress run
        uses: cypress-io/github-action@v6

  deploy-production:
    runs-on: ubuntu-latest
    needs: [k6_load_test, zap_scan, cypress-run]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.slot_swap.outputs.url }}
    steps:
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Swap staging slot into production
        id: slot_swap
        run: |
          az webapp deployment slot swap -g csd -n ${{ env.AZURE_WEBAPP_NAME }} -s staging
          url=$(az webapp show -g csd -n ${{ env.AZURE_WEBAPP_NAME }} --query "defaultHostName" -o tsv)
          echo "{url}={https://$url}" >> $GITHUB_OUTPUT
      - name: az cli logout
        run: az logout
